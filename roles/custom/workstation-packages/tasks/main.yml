---
- set_fact:
    regular_user: "{{ ansible_env.SUDO_USER or ansible_user_id }}"
  tags:
    - always

- name: Add apt keys from urls
  apt_key:
    url: "{{ item }}"
    state: present
  with_items: "{{ wkstn_apt_key_urls }}"
  tags:
    - gpg
    - apt

- name: Add apt repositories
  apt_repository:
    repo: "{{ item.repo }}"
    state: present
  with_items: "{{ wkstn_ppa }}"
  tags:
    - ppa
    - apt

- name: Update apt cache
  apt:
    update_cache: true
  tags:
    - apt

- name: Install packages from apt
  apt:
    name: "{{ item }}"
    state: present
    update_cache: false
  with_items: "{{ wkstn_apt_packages }}"
  tags:
    - apt

- name: Install packages from remote debs
  apt:
    deb: "{{ item.src }}"
    state: present
  with_items: "{{ wkstn_remote_debs }}"
  tags:
    - deb

- name: Make sure snapd is present before we try installing snap packages
  apt:
    name: snapd
    state: present
    update_cache: false
  tags:
    - apt
    - snapd
    - snap

- name: Install packages from snap
  snap:
    name: "{{ item.name }}"
    classic: "{{ item.classic }}"
  with_items: "{{ wkstn_snap_packages }}"
  tags:
    - snap

- name: Fetch entire git repos - non-root
  become_user: "{{ regular_user }}"
  git:
    repo: "{{ item.repo }}"
    dest: "{{ item.dest }}"
  with_items: "{{ wkstn_git_repos }}"
  tags:
    - git

- name: Fetch entire repos from git - as root
  # become: true # Not necessary - the playbook should already be running with sudo.
  git:
    repo: "{{ item.repo }}"
    dest: "{{ item.dest }}"
  with_items: "{{ wkstn_sudo_git_repos }}"
  tags:
    - sudo-git

- name: Prepare zip dirs
  become_user: "{{ regular_user }}"
  file:
    state: directory
    dest: "{{ item.dest }}"
  with_items: "{{ wkstn_zips }}"
  tags:
    - zip
    - zips

- name: Fetch software from wkstn_zips
  become_user: "{{ regular_user }}"
  unarchive:
    src: "{{ item.url }}"
    dest: "{{ item.dest }}"
    remote_src: yes
  with_items: "{{ wkstn_zips }}"
  tags:
    - zip
    - zips

- name: Download non-github standalone binaries specified in the "wkstn_standalone_binaries" list. 
    If a given binary comes from GitHub, use "wkstn_github_install_release" instead.
  become_user: "{{ regular_user }}"
  get_url:
      url: "{{ item.url }}"
      dest: "{{ item.dest }}"
      mode: 0755
      checksum: "{{ item.checksum }}"  #  Format: <algorithm>:<checksum_value>
  with_items: "{{ wkstn_standalone_binaries }}"
  tags:
      - standalone-binaries
      - bin


- name: Use 'install-release' to grab a bunch of little tools from github
  become_user: "{{ regular_user }}"
  tags:
    - install-release
  block:

    - name: Make sure the "install-release" pip module is installed for the local user.
      ansible.builtin.pip:
        name: install-release
        state: present
        extra_args: --user
      register: pip_result

    - debug:
        var: pip_result

    - name: Install tools from github releases for the local user.
      ansible.builtin.shell: >
        set -eu -o pipefail && (
        if install-release ls | grep -w "{{ item.repo  }}"
        ; then true
        ; else install-release get  -q -y "{{ item.repo }}"
        ; fi
        )
      args:
        executable: /bin/bash
      loop: "{{ wkstn_github_install_release }}"
      register: wkstn_github_install_release_result

    - debug:
        var: wkstn_github_install_release_result


- name: Create symlinks
  become_user: "{{ regular_user }}"
  file:
      src: "{{ item.src }}"
      dest: "{{ item.dest }}"
      state: "{{ item.state | default('link') }}"
  with_items: "{{ wkstn_symlinks }}"
  tags:
      - link
      - symlinks
      - links
      - zip
      - zips
      - bin
      - install-release
